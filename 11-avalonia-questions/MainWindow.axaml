<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="MyApp.MainWindow"
        xmlns:local="using:MyApp"
        xmlns:sys="using:System"
        x:DataType="local:MainWindow"
        Title="MyApp">
    <Window.Resources>
        <!-- 
            Register the StringToIntConverter as a static resource.
            x:Key defines the identifier used to reference this converter in bindings.
        -->
        <local:StringToIntConverter x:Key="StringToIntConverter" />
    </Window.Resources>
    
    <StackPanel>
        <!-- 
            BINDING EXAMPLE 1: Basic Command Binding
            ========================================
            
            Command="{Binding NormalClickCommand}"
            
            - {Binding} creates a data binding expression
            - NormalClickCommand is automatically generated by [RelayCommand] attribute
            - The command is resolved from the current DataContext (MainWindow)
            - No parameters are passed to the command method
        -->
        <Button Command="{Binding NormalClickCommand}">Normal Click</Button>
        
        <!-- 
            BINDING EXAMPLE 2: Command with Literal Parameter
            =================================================
            
            CommandParameter="42"
            
            - CommandParameter passes a literal string value "42" to the command
            - The parameter is received as a string in the ClickWithParameter method
            - This demonstrates simple parameter passing without binding
        -->
        <Button Command="{Binding ClickWithParameterCommand}" 
                CommandParameter="42">Click with Parameter</Button>
        
        <!-- 
            BINDING EXAMPLE 3: Self-Referencing Binding
            ============================================
            
            CommandParameter="{Binding $self.Content}"
            
            - $self is a special binding keyword that refers to the current UI element (this Button)
            - .Content accesses the Content property of the button
            - The button's content ("Pass Button Content") is passed as the parameter
            - This enables dynamic parameter passing based on UI element properties
            - Useful for accessing Width, Height, Name, or any other property of the control
        -->
        <Button Command="{Binding ClickWithContentCommand}"
                CommandParameter="{Binding $self.Content}">Pass Button Content</Button>
        
        <!-- 
            BINDING EXAMPLE 4: Binding with Value Converter
            ===============================================
            
            CommandParameter="{Binding $self.Content, Converter={StaticResource StringToIntConverter}}"
            
            - Combines self-referencing binding with type conversion
            - $self.Content gets the button content (string "42")
            - Converter={StaticResource StringToIntConverter} applies the registered converter
            - The converter transforms the string "42" into integer 42
            - This enables type-safe parameter passing to methods expecting specific types
            - StaticResource references the converter defined in Window.Resources
        -->
        <Button Command="{Binding ClickWithIntParameterCommand}" 
                CommandParameter="{Binding $self.Content, Converter={StaticResource StringToIntConverter}}">42</Button>
    </StackPanel>
</Window>
